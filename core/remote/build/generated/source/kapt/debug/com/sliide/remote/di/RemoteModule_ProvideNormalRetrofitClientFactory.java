// Generated by Dagger (https://dagger.dev).
package com.sliide.remote.di;

import com.sliide.remote.environment.IEnvironmentConfig;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;
import okhttp3.OkHttpClient;
import retrofit2.Retrofit;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class RemoteModule_ProvideNormalRetrofitClientFactory implements Factory<Retrofit> {
  private final Provider<OkHttpClient> okHttpClientProvider;

  private final Provider<IEnvironmentConfig> environmentConfigProvider;

  public RemoteModule_ProvideNormalRetrofitClientFactory(
      Provider<OkHttpClient> okHttpClientProvider,
      Provider<IEnvironmentConfig> environmentConfigProvider) {
    this.okHttpClientProvider = okHttpClientProvider;
    this.environmentConfigProvider = environmentConfigProvider;
  }

  @Override
  public Retrofit get() {
    return provideNormalRetrofitClient(okHttpClientProvider.get(), environmentConfigProvider.get());
  }

  public static RemoteModule_ProvideNormalRetrofitClientFactory create(
      Provider<OkHttpClient> okHttpClientProvider,
      Provider<IEnvironmentConfig> environmentConfigProvider) {
    return new RemoteModule_ProvideNormalRetrofitClientFactory(okHttpClientProvider, environmentConfigProvider);
  }

  public static Retrofit provideNormalRetrofitClient(OkHttpClient okHttpClient,
      IEnvironmentConfig environmentConfig) {
    return Preconditions.checkNotNullFromProvides(RemoteModule.INSTANCE.provideNormalRetrofitClient(okHttpClient, environmentConfig));
  }
}
