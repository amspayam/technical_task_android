// Generated by Dagger (https://dagger.dev).
package com.sliide.remote.di;

import com.sliide.remote.environment.IEnvironmentConfig;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;
import okhttp3.Interceptor;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class RemoteModule_ProvideLoggingInterceptorFactory implements Factory<Interceptor> {
  private final Provider<IEnvironmentConfig> iEnvironmentConfigProvider;

  public RemoteModule_ProvideLoggingInterceptorFactory(
      Provider<IEnvironmentConfig> iEnvironmentConfigProvider) {
    this.iEnvironmentConfigProvider = iEnvironmentConfigProvider;
  }

  @Override
  public Interceptor get() {
    return provideLoggingInterceptor(iEnvironmentConfigProvider.get());
  }

  public static RemoteModule_ProvideLoggingInterceptorFactory create(
      Provider<IEnvironmentConfig> iEnvironmentConfigProvider) {
    return new RemoteModule_ProvideLoggingInterceptorFactory(iEnvironmentConfigProvider);
  }

  public static Interceptor provideLoggingInterceptor(IEnvironmentConfig iEnvironmentConfig) {
    return Preconditions.checkNotNullFromProvides(RemoteModule.INSTANCE.provideLoggingInterceptor(iEnvironmentConfig));
  }
}
