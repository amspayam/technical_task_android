// Generated by Dagger (https://dagger.dev).
package com.sliide.remote.di;

import com.sliide.remote.environment.IEnvironmentConfig;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class RemoteModule_ProvideEnvironmentConfigFactory implements Factory<IEnvironmentConfig> {
  private final Provider<Boolean> isDebugBuildProvider;

  public RemoteModule_ProvideEnvironmentConfigFactory(Provider<Boolean> isDebugBuildProvider) {
    this.isDebugBuildProvider = isDebugBuildProvider;
  }

  @Override
  public IEnvironmentConfig get() {
    return provideEnvironmentConfig(isDebugBuildProvider.get());
  }

  public static RemoteModule_ProvideEnvironmentConfigFactory create(
      Provider<Boolean> isDebugBuildProvider) {
    return new RemoteModule_ProvideEnvironmentConfigFactory(isDebugBuildProvider);
  }

  public static IEnvironmentConfig provideEnvironmentConfig(boolean isDebugBuild) {
    return Preconditions.checkNotNullFromProvides(RemoteModule.INSTANCE.provideEnvironmentConfig(isDebugBuild));
  }
}
