// Generated by Dagger (https://dagger.dev).
package com.sliide.remote.di;

import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;
import okhttp3.Authenticator;
import okhttp3.Interceptor;
import okhttp3.OkHttpClient;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class RemoteModule_ProvideAuthOkHttpClientFactory implements Factory<OkHttpClient> {
  private final Provider<Interceptor> loggerInterceptorProvider;

  private final Provider<Interceptor> authInterceptorProvider;

  private final Provider<Authenticator> tokenAuthenticatorProvider;

  public RemoteModule_ProvideAuthOkHttpClientFactory(
      Provider<Interceptor> loggerInterceptorProvider,
      Provider<Interceptor> authInterceptorProvider,
      Provider<Authenticator> tokenAuthenticatorProvider) {
    this.loggerInterceptorProvider = loggerInterceptorProvider;
    this.authInterceptorProvider = authInterceptorProvider;
    this.tokenAuthenticatorProvider = tokenAuthenticatorProvider;
  }

  @Override
  public OkHttpClient get() {
    return provideAuthOkHttpClient(loggerInterceptorProvider.get(), authInterceptorProvider.get(), tokenAuthenticatorProvider.get());
  }

  public static RemoteModule_ProvideAuthOkHttpClientFactory create(
      Provider<Interceptor> loggerInterceptorProvider,
      Provider<Interceptor> authInterceptorProvider,
      Provider<Authenticator> tokenAuthenticatorProvider) {
    return new RemoteModule_ProvideAuthOkHttpClientFactory(loggerInterceptorProvider, authInterceptorProvider, tokenAuthenticatorProvider);
  }

  public static OkHttpClient provideAuthOkHttpClient(Interceptor loggerInterceptor,
      Interceptor authInterceptor, Authenticator tokenAuthenticator) {
    return Preconditions.checkNotNullFromProvides(RemoteModule.INSTANCE.provideAuthOkHttpClient(loggerInterceptor, authInterceptor, tokenAuthenticator));
  }
}
